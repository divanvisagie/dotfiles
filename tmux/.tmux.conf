# https://www.seanh.cc/2020/12/30/how-to-make-tmux's-windows-behave-like-browser-tabs/
# Check if the SESSION_NAME environment variable is set; if not, use "MyFirstSession" as default
set-option -g base-index 1
if-shell '[ -z "$SESSION_NAME" ]' 'new-session -s "λ"' 'new-session -s "$SESSION_NAME"'

# Color variables
bg_main="#32302f"
bg_dark="#282828"
bg_lighter="#3c3836"
fg_main="#928374"
fg_muted="#59524c"
accent_color="#e77500"
white="#ffffff"
red="red"
yellow="colour214"
fg1="colour223"
bg1="colour237"
fg3="colour248"
bg2="colour239"
fg2="colour250"
blue="colour109"
orange="colour167"
dark="colour235"
selected_bg="colour236"

set -g default-terminal "screen-256color"
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",*256col*:Tc"

set -g status-position top
set -g mouse on 

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# resize panes more easily
bind < resize-pane -L 10
bind > resize-pane -R 10
bind - resize-pane -D 10
bind + resize-pane -U 10

# tab management
bind -n C-t new-window

set-option -g status "on"

##### Set Up Task Bar ######

# default statusbar color
set-option -g status-style bg=$bg_main,fg=$fg1 # bg=bg1, fg=fg1

set-window-option -g window-status-style bg=$yellow,fg=$selected_bg # bg=yellow (selected tab), fg=bg1
set-window-option -g window-status-activity-style bg=$bg1,fg=$fg3 # bg=bg1, fg=fg3
set-window-option -g window-status-current-style bg=$red,fg=$bg1 # fg=bg1

# pane border
set-option -g pane-active-border-style fg=$fg2 #fg2
set-option -g pane-border-style fg=$bg1 #bg1

# message infos
set-option -g message-style bg=$bg2,fg=$fg1 # bg=bg2, fg=fg1

# writing commands inactive
set-option -g message-command-style bg=$bg2,fg=$fg1 # bg=fg3, fg=bg1

# pane number display
set-option -g display-panes-active-colour $fg2 #fg2
set-option -g display-panes-colour $bg1 #bg1

set-window-option -g clock-mode-colour $blue #blue
set-window-option -g window-status-bell-style bg=$orange,fg=$dark

## Theme settings mixed with colors (unfortunately, but there is no cleaner way)
set-option -g status-justify "left"
set-option -g status-left-style none
set-option -g status-left-length "80"
set-option -g status-right-style none
set-option -g status-right-length "80"
set-window-option -g window-status-separator ""

is_dark='[ "$(dms -c)" = "true" ]'
# set dark mode options
set-option -g status-left "#[bg=$accent_color,fg=$bg_dark, bold] #S #[bg=$bg_main,nobold,noitalics,nounderscore] "
if-shell "$is_dark" "set-option -g status-left '#[bg=$accent_color,fg=$bg_dark, bold] #S #[bg=$bg_main,nobold,noitalics,nounderscore] '"
set-option -g status-right "#[bg=$accent_color,fg=$bg_dark,bold,noitalics,nounderscore] #h │ %H:%M "
if-shell "$is_dark" "set-option -g status-right '#[bg=$accent_color,fg=$bg_dark,bold,noitalics,nounderscore] #h │ %H:%M '"

#draw active tab:
set-window-option -g window-status-current-format "#[bg=$white,fg=$bg_dark] #I │ #{b:pane_current_path} │#[bold] #W#{?window_zoomed_flag,*Z,} #[bg=$bg_main,nobold,noitalics,nounderscore] "
if-shell "$is_dark" "set-window-option -g window-status-current-format '#[bg=$bg_dark,fg=$fg_main] #I │ #{b:pane_current_path} │#[bold] #W#{?window_zoomed_flag,*Z,} #[bg=$bg_main,nobold,noitalics,nounderscore] '"
#set-window-option -g window-status-current-format "#[bg=$bg_dark,fg=$fg_main] #I │ #{b:pane_current_path} │#[bold] #W#{?window_zoomed_flag,*Z,} #[bg=$bg_main,nobold,noitalics,nounderscore] "
#draw inactive tab:
set-window-option -g window-status-format "#[bg=$bg_lighter,fg=$fg_main] #I │ #{b:pane_current_path} │ #W #[bg=$bg_main,noitalics] "
# set-window-option -g window-status-format "#[bg=$bg_lighter,fg=$fg_muted] #I │ #{b:pane_current_path} │ #W #[bg=$bg_main,noitalics] "
if-shell "$is_dark" "set-window-option -g window-status-format '#[bg=$bg_lighter,fg=$fg_muted] #I │ #{b:pane_current_path} │ #W #[bg=$bg_main,noitalics] '"
#{pane_current_path} 
# vim: set ft=tmux tw=0 nowrap:

# # List of plugins
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# run '~/.tmux/plugins/tpm/tpm'

# Before your existing bindings, define a variable to detect if vim is running
#is_vim='[ "$(tmux list-panes -F "#{pane_current_command}")" = "nvim" ]'
is_vim='[ "$(tmux display-message -p "#{pane_current_command}")" = "nvim" ]'
# Resize pane down, or send C-j to vim if vim is running
bind -n C-j if-shell "$is_vim" "send-keys C-j" "resize-pane -D 2"

# Resize pane up, or send C-k to vim if vim is running
bind -n C-k if-shell "$is_vim" "send-keys C-k" "resize-pane -U 2"

# Resize pane left, or send C-h to vim if vim is running
bind -n C-h if-shell "$is_vim" "send-keys C-h" "resize-pane -L 2"

# Resize pane right, or send C-l to vim if vim is running
bind -n C-l if-shell "$is_vim" "send-keys C-l" "resize-pane -R 2"

# Bind numbers with Alt, if supported by your terminal
bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9

# Do the same bindings on CTRL
bind-key -n C-1 select-window -t 1
bind-key -n C-2 select-window -t 2
bind-key -n C-3 select-window -t 3
bind-key -n C-4 select-window -t 4
bind-key -n C-5 select-window -t 5
bind-key -n C-6 select-window -t 6
bind-key -n C-7 select-window -t 7
bind-key -n C-8 select-window -t 8
bind-key -n C-9 select-window -t 9
